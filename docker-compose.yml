version: "3.8"

services:
  # Load Balancer (HAProxy) für Event Service (WebSocket)
  haproxy:
    image: haproxy:latest
    build: 
      context: ./
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg 
    deploy:
      replicas: 1
    networks:
      - ws-network
    depends_on:
      - event_service
  
  # Redis für die Speicherung von Pixel-Daten (Schnellzugriff)
  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./backend/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - backend

  # PostgreSQL für die Speicherung von Pixel-Daten (Persistenz)
  postgres:
    image: postgres:latest
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  # Pixel Service für die Verarbeitung von Pixel-Daten (mit Replicas)
  pixel_service:
    build:
      context: ./backend/pixel_service
    image: pixel_service_image:latest
    depends_on:
      - redis
      - postgres
      - event_service
    env_file:
      - ./backend/pixel_service/.env
    ports:
      - "8000:8000"
    deploy:
      replicas: 3
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    networks:
      - backend
      - frontend

  # Event Service für WebSocket-Verbindungen für das Updaten der Canvas (mit Replicas)
  event_service:
    build:
      context: ./backend/event_service
    image: event_service_image:latest
    depends_on:
      - redis
    deploy:
      replicas: 3
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    ports:
      - "8001:8001"
    networks:
      - backend
      - frontend
      - ws-network

  # NEXT.js als Frontend für die Benutzeroberfläche (mit Replicas)
  frontend:
    build:
      context: ./frontend
    image: frontend_image:latest
    ports:
      - "3000:3000"
    depends_on:
      - pixel_service
      - event_service
    deploy:
      replicas: 3
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - NODE_ENV=production
    networks:
      - frontend

volumes:
  postgres_data:

networks:
  backend:
  frontend:
  ws-network:
    driver: overlay